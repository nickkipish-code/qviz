from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update, delete
from ..config import ADMINS
from ..keyboards.admin import admin_root_kb, menu_list_kb, button_edit_kb
from ..db import async_session, next_order_for_row
from ..models import Menu, Button

router = Router(name="admin")

# ===== –í—Ö–æ–¥ =====
@router.message(Command("admin"))
async def admin_entry(msg: Message):
    if msg.from_user.id not in ADMINS:
        await msg.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    await msg.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_root_kb())

@router.callback_query(F.data == "adm:back")
async def adm_back(cb: CallbackQuery):
    await cb.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_root_kb())
    await cb.answer()

# ===== –†–∞–∑–¥–µ–ª ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª =====
@router.callback_query(F.data == "adm:menu")
async def adm_menu_root(cb: CallbackQuery):
    async with async_session() as session:
        menu = (await session.execute(select(Menu).where(Menu.name == "Main"))).scalar_one()
        btns = (await session.execute(
            select(Button).where(Button.menu_id == menu.id).order_by(Button.row.asc(), Button.order.asc())
        )).scalars().all()
    payload = [(b.id, b.label, b.row, b.col_span, b.is_active) for b in btns]
    await cb.message.edit_text("üß± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫:", reply_markup=menu_list_kb(payload))
    await cb.answer()

# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ =====
@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":open"))
async def btn_open(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
    txt = (f"–ö–Ω–æ–ø–∫–∞ #{b.id}\n"
           f"–¢–µ–∫—Å—Ç: {b.label}\n–†—è–¥: {b.row}\n–®–∏—Ä–∏–Ω–∞(col_span): {b.col_span}\n–ê–∫—Ç–∏–≤–Ω–∞: {b.is_active}\n"
           f"–ü–æ—Ä—è–¥–æ–∫: {b.order}\nAction: {b.action_type}\nPayload: {b.action_payload or '(–ø—É—Å—Ç–æ)'}")
    await cb.message.edit_text(txt, reply_markup=button_edit_kb(b.id))
    await cb.answer()

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (FSM) =====
class AddBtn(StatesGroup):
    label = State()
    row = State()
    col = State()
    text = State()

@router.callback_query(F.data == "btn:add")
async def btn_add_start(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AddBtn.label)
    await cb.message.edit_text("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
    await cb.answer()

@router.message(AddBtn.label)
async def btn_add_label(msg: Message, state: FSMContext):
    await state.update_data(label=msg.text)
    await state.set_state(AddBtn.row)
    await msg.answer("–†—è–¥ –∫–Ω–æ–ø–∫–∏? –í–≤–µ–¥–∏—Ç–µ `1` –∏–ª–∏ `2`.")

@router.message(AddBtn.row)
async def btn_add_row(msg: Message, state: FSMContext):
    if msg.text not in ("1", "2"):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return
    await state.update_data(row=int(msg.text))
    await state.set_state(AddBtn.col)
    await msg.answer("–®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏? –í–≤–µ–¥–∏—Ç–µ `1` –∏–ª–∏ `2` (2 ‚Äî —à–∏—Ä–æ–∫–∞—è).")

@router.message(AddBtn.col)
async def btn_add_col(msg: Message, state: FSMContext):
    if msg.text not in ("1", "2"):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return
    await state.update_data(col=int(msg.text))
    await state.set_state(AddBtn.text)
    await msg.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ (action=send_text):")

@router.message(AddBtn.text)
async def btn_add_save(msg: Message, state: FSMContext):
    data = await state.get_data()
    label = data["label"]
    row = data["row"]
    col = data["col"]
    payload_text = msg.text

    async with async_session() as session:
        menu = (await session.execute(select(Menu).where(Menu.name == "Main"))).scalar_one()
        order = await next_order_for_row(session, menu.id, row)
        session.add(Button(
            menu_id=menu.id,
            label=label,
            row=row,
            order=order,
            col_span=col,
            is_active=True,
            action_type="send_text",
            action_payload=payload_text
        ))
        await session.commit()

    await state.clear()
    await msg.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ /admin ‚Üí ¬´üß± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.")

# ===== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π =====
class EditLabel(StatesGroup):
    waiting = State()

@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":edit_label"))
async def btn_edit_label_start(cb: CallbackQuery, state: FSMContext):
    bid = int(cb.data.split(":")[1])
    await state.set_state(EditLabel.waiting)
    await state.update_data(bid=bid)
    await cb.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:")
    await cb.answer()

@router.message(EditLabel.waiting)
async def btn_edit_label_save(msg: Message, state: FSMContext):
    data = await state.get_data()
    bid = data["bid"]
    async with async_session() as session:
        await session.execute(
            update(Button).where(Button.id == bid).values(label=msg.text)
        )
        await session.commit()
    await state.clear()
    await msg.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ /admin ‚Üí ¬´üß± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")

@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":edit_row"))
async def btn_edit_row(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
        new_row = 2 if b.row == 1 else 1
        # –ø–æ–º–µ—Å—Ç–∏–º –≤ –∫–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∞
        new_order = await next_order_for_row(session, b.menu_id, new_row)
        b.row = new_row
        b.order = new_order
        await session.commit()
    await cb.answer("–†—è–¥ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω.")
    await btn_open(cb)

@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":edit_colspan"))
async def btn_edit_col(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
        b.col_span = 1 if b.col_span == 2 else 2
        await session.commit()
    await cb.answer("–®–∏—Ä–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.")
    await btn_open(cb)

@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":toggle"))
async def btn_toggle(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
        b.is_active = not b.is_active
        await session.commit()
    await cb.answer("–í–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞.")
    await btn_open(cb)

# ===== –ü–æ—Ä—è–¥–æ–∫ –≤ —Ä—è–¥—É (up/down) =====
@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":up"))
async def btn_up(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
        if b.order == 0:
            await cb.answer("–ò —Ç–∞–∫ –≤–µ—Ä—Ö–Ω—è—è.")
            return
        # –∏—â–µ–º —Å–æ—Å–µ–¥–∞ —Å–≤–µ—Ä—Ö—É
        prev = (await session.execute(
            select(Button).where(Button.menu_id == b.menu_id, Button.row == b.row, Button.order == b.order - 1)
        )).scalar_one_or_none()
        if prev:
            prev.order, b.order = b.order, prev.order
            await session.commit()
    await cb.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤–≤–µ—Ä—Ö.")
    await btn_open(cb)

@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":down"))
async def btn_down(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one()
        # –∏—â–µ–º —Å–æ—Å–µ–¥–∞ —Å–Ω–∏–∑—É
        nextb = (await session.execute(
            select(Button).where(Button.menu_id == b.menu_id, Button.row == b.row, Button.order == b.order + 1)
        )).scalar_one_or_none()
        if nextb:
            nextb.order, b.order = b.order, nextb.order
            await session.commit()
    await cb.answer("–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤–Ω–∏–∑.")
    await btn_open(cb)

# ===== –£–¥–∞–ª–µ–Ω–∏–µ =====
@router.callback_query(F.data.startswith("btn:") & F.data.endswith(":del"))
async def btn_delete(cb: CallbackQuery):
    bid = int(cb.data.split(":")[1])
    async with async_session() as session:
        b = (await session.execute(select(Button).where(Button.id == bid))).scalar_one_or_none()
        if b:
            await session.execute(delete(Button).where(Button.id == bid))
            # —Å–¥–≤–∏–≥ order —É –Ω–∏–∂–Ω–∏—Ö –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å ¬´–¥—ã—Ä—ã¬ª
            await session.commit()
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ.")
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
    await adm_menu_root(cb)
